We are inducing headers through property file beyond just adding custom filter
Hence this is better than the tutorial 
	https://www.javainuse.com/spring/cloud-filter

---------------------------------------------------------------------	
			Gateway configuration
---------------------------------------------------------------------	
1. Create a spring gateway project

2. Preferably copy the pom.xml 
			or
	Make the following changes in the pom.xml
	a. Remove <parent> entry and spring-boot-starter-test entry
	b. Add following into the properties
				<spring-cloud.version>Greenwich.SR2</spring-cloud.version>

	Properties should look as follows
	<properties>
		<java.version>1.8</java.version>
		<spring-cloud.version>Greenwich.SR2</spring-cloud.version>
	</properties>
	
	c. Add repo.
	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>
	</repositories>
	
3. Add the following into application.yml file

server:
  port: 8080
		
		
4. Add Application file 

5. Code Spring Cloud config as follows

----------------------------------------------------------------
package com.apigateway;

import org.springframework.cloud.gateway.route.RouteLocator;
import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class SpringCloudConfig {

	@Bean
	public RouteLocator gatewayRoutes(RouteLocatorBuilder builder) {
		return builder.routes()
				.route(r -> r.path("/employee/**")
				//Pre and Post Filters provided by Spring Cloud Gateway
						.filters(f -> f.addRequestHeader("first-request", "first-request-header")
								.addResponseHeader("first-response", "first-response-header"))
						.uri("http://localhost:8081/")
						.id("employeeModule"))

				.route(r -> r.path("/consumer/**")
				//Pre and Post Filters provided by Spring Cloud Gateway
						.filters(f -> f.addRequestHeader("second-request", "second-request-header")
								.addResponseHeader("second-response", "second-response-header"))
						.uri("http://localhost:8082/")
						.id("consumerModule"))
				.build();
	}
}		
----------------------------------------------------------------

---------------------------------------------------------------------
			Gateway First Service
---------------------------------------------------------------------
1. Create a spring web project

2. Add the following to application.yml

spring:
  application:
    name: apigatewayfirstservice
server:
  port: 8081

3. Code FirstContoller as follows

package com.apigateway;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/employee")
public class FirstController {

	@GetMapping("/message")
	public String test(@RequestHeader("first-request") String header) {
		System.out.println(header);
		return "Hello Called in First Service "+header;
	}
}


---------------------------------------------------------------------
			Gateway Second Service
---------------------------------------------------------------------
1. Create a spring web project

2. Add the following to application.yml

spring:
  application:
    name: apigatewaysecondservice
server:
  port: 8082

  
3. Code the second controller as follows 
package com.apigateway;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/consumer")
public class SecondController {

	@GetMapping("/message")
	public String test(@RequestHeader("second-request") String header) {
		System.out.println(header);
		return "Hello Called in Second Service "+header;
	}
}



----------------------------------

Go to the browser and hit
	localhost:8080/employee/message
Go to the postman and hit
	 localhost:8080/employee/message
	Verify the response header

